The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Trying simple add:

    >>> add_integer(3, 4)
    7

Trying simple add with negative number:

    >>> add_integer(-3, 4)
    1

Trying with 1 argument (to see if b = 98 works):

    >>> add_integer(2)
    100

Trying with no arguments:

    >>> add_integer()
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    TypeError: add_integer() missing 1 required positional argument: 'a'

Trying with float and integers values:

    >>> add_integer(2.6, 3)
    5

Trying with one argument as a type that's not float or integer:

    >>> add_integer("1", 5)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/root/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 9, in add_integer
       raise TypeError("a must be an integer")
    TypeError: a must be an integer

Trying NaN:

    >> add_integer(float('nan'), 3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/root/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 13, in add_integer
        return int(a) + int(b)
    ValueError: cannot convert float NaN to integer

Trying float overflow:

    >>> add_integer(3, float('inf'))
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[5]>", line 1, in <module>
        add_integer(3, float('inf'))
      File "/root/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 13, in add_integer
        return int(a) + int(b)
    OverflowError: cannot convert float infinity to integer

Trying from casting int():

    >>> add_integer(int("33"), 7)
    40